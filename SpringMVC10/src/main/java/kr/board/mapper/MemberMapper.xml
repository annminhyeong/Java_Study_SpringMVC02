<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!-- namespace : mapper Interface가 여러개일경우 구별하기 위해 사용 -->
<mapper namespace="kr.board.mapper.MemberMapper">
	
	<select id="registerCheck" parameterType="String" resultType="kr.board.entity.Member">
		select * from mem_stbl where memID = #{memID}
	</select>
	
	<insert id="register" parameterType="kr.board.entity.Member">
		insert into mem_stbl
		(  
		   memIdx,
		   memID,
		   memPassword,
		   memName,
		   memAge,
		   memGender,
		   memEmail,
		   memProfile
		 )values(
		 	<!-- select를 해서 memIdx의 최대값을 가져옴  -->
		 	<!-- 최대값이 null이면 1을 대입하고 아니면 memIdx의 최대값의 1을 더한다 -->
		 	<!-- mem은 별칭 -->
		   (select IFNULL(MAX(memIdx)+1,1) from mem_stbl mem),   
		   #{memID},
		   #{memPassword},
		   #{memName},
		   #{memAge},
		   #{memGender},
		   #{memEmail},
		   #{memProfile}
		 )
	</insert>
	
	<update id="memUpdate" parameterType="kr.board.entity.Member">
		update mem_stbl 
		set
			memPassword = #{memPassword},
			memName     = #{memName},
			memAge      = #{memAge},
			memGender   = #{memGender},
			memEmail    = #{memEmail}
		where 
			memID = #{memID}
	</update>
	
	<resultMap type="kr.board.entity.Member" id="memberMap">
		<id property="memIdx" column="memIdx"/>
		<result property="memID" column="memID"/>	
		<result property="memPassword" column="memPassword"/>	
		<result property="memName" column="memName"/>	
		<result property="memAge" column="memAge"/>	
		<result property="memGender" column="memGender"/>	
		<result property="memEmail" column="memEmail"/>	
		<result property="memProfile" column="memProfile"/>
		<collection property="authList" resultMap="authMap"></collection>
	</resultMap>
	
	<resultMap type="kr.board.entity.AuthVO" id="authMap">
		<id property="no" column="no"/>
		<result property="memID" column="memID"/>
		<result property="auth" column="auth"/>
	</resultMap>
	
	<select id="memLogin" parameterType="kr.board.entity.Member" resultMap="memberMap">
		select * from mem_stbl mem LEFT OUTER JOIN mem_auth auth
		on mem.memID = auth.memID where mem.memID = #{username}
	</select>
	
	<!-- 내가 입력한 아이디가 mem_stbl에 있을때 mem_stbl을 기준으로 조인해서 모든항목을 검색하세요. -->
	<!--  단 mem_stbl의 memID가 mem_auth와 같은 것만 검색하세요.  -->
	<select id="getMember" resultMap="memberMap">
		select * from mem_stbl mem LEFT OUTER JOIN mem_auth auth 
		on mem.memID = auth.memID where mem.memID = #{memID}
	</select>
	
	<update id="memProfileUpdate" parameterType="kr.board.entity.Member">
		update mem_stbl 
		set 
			memProfile = #{memProfile}
		where 
			memID = #{memID}	
	</update>
	
	<insert id="authInsert" parameterType="kr.board.entity.AuthVO">
		insert into mem_auth (memID,auth)
		values(#{memID}, #{auth})
	</insert>
	
	<delete id="authDelete" parameterType="String">
		delete from mem_auth where memID = #{memID}
	</delete>
</mapper>